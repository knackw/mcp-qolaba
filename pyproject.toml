[project]
name = "fastmcp"
dynamic = ["version"]
description = "The fast, Pythonic way to build MCP servers and clients."
authors = [{ name = "Jeremiah Lowin" }]
dependencies = [
    "python-dotenv>=1.1.0",
    "exceptiongroup>=1.2.2",
    "httpx>=0.28.1",
    "mcp>=1.12.4,<2.0.0",
    "openapi-pydantic>=0.5.1",
    "rich>=13.9.4",
    "cyclopts>=3.0.0",
    "authlib>=1.5.2",
    "pydantic[email]>=2.11.7",
    "pydantic-settings>=2.6.1",
    "pyperclip>=1.9.0",
    "openapi-core>=0.19.5",
    # Structured Logging Dependencies
    "structlog>=24.1.0",
    "python-json-logger>=2.0.7",
]

requires-python = ">=3.10"
readme = "README.md"
license = "Apache-2.0"

keywords = [
    "mcp",
    "mcp server",
    "mcp client",
    "model context protocol",
    "fastmcp",
    "llm",
    "agent",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

[project.optional-dependencies]
websockets = ["websockets>=15.0.1"]
openai = ["openai>=1.102.0"]

[dependency-groups]
dev = [
    "dirty-equals>=0.9.0",
    "fastmcp[openai]",
    # add optional dependencies for fastmcp dev
    "fastapi>=0.115.12",
    "inline-snapshot[dirty-equals]>=0.27.2",
    "ipython>=8.12.3",
    "pdbpp>=0.10.3",
    "pre-commit",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "psutil",
    "pyinstrument>=5.0.2",
    "pyperclip>=1.9.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=6.1.1",
    "pytest-env>=1.1.5",
    "pytest-flakefinder",
    "pytest-httpx>=0.35.0",
    "pytest-report>=0.2.1",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.6.1",
    "ruff",
    "mypy>=1.8.0",
    "ty>=0.0.1a19",
]

[project.scripts]
fastmcp = "fastmcp.cli:app"

[project.urls]
Homepage = "https://gofastmcp.com"
Repository = "https://github.com/jlowin/fastmcp"
Documentation = "https://gofastmcp.com"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.hatch.metadata]
allow-direct-references = true

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true
fallback-version = "0.0.0"


[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
# filterwarnings = ["error::DeprecationWarning"]
timeout = 3
env = [
    "FASTMCP_TEST_MODE=1",
    'D:FASTMCP_LOG_LEVEL=DEBUG',
    'D:FASTMCP_ENABLE_RICH_TRACEBACKS=0',

]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "client_process: marks tests that spawn client processes via stdio transport. These can create issues when run in the same CI environment as other subprocess-based tests.",
]
# Automatically mark all tests in integration_tests folder
pythonpath = [".", "src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
addopts = [
    "--cov=src/qolaba_mcp_server",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "--cov-branch",
    "--cov-fail-under=80"
]

[tool.coverage.run]
source = ["src/qolaba_mcp_server"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/__pycache__/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
title = "Qolaba MCP Server Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Black code formatter configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["qolaba_mcp_server", "fastmcp"]
known_third_party = [
    "pytest", "pydantic", "httpx", "asyncio", "logging",
    "typing", "pathlib", "datetime", "json", "os", "sys"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/__pycache__/*"
]

# Ruff linter configuration (modern alternative to flake8)
[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
]

extend-select = ["I", "UP"]

ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    # W503 is not supported in ruff, it's a deprecated flake8 rule
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["F401", "F403", "F405"]
"__init__.py" = ["F401", "F403", "I001", "RUF013"]
# allow imports not at the top of the file
"src/fastmcp/__init__.py" = ["E402"]

# MyPy static type checker configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
no_implicit_reexport = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_subclassing_any = true
check_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Paths to check - Focus only on our qolaba_mcp_server code
files = ["src/qolaba_mcp_server", "scripts"]

# Exclude patterns
exclude = [
    "tests/",
    "src/fastmcp/",
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "migrations/",
    "__pycache__/",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "httpx.*",
    "fastmcp.*",
    "mcp.*",
    "requests.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "qolaba_mcp_server.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_unused_ignores = true
disallow_untyped_calls = true

[tool.ty.src]
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv", ".git", "dist"]

[tool.ty.environment]
python-version = "3.10"

[tool.ty.rules]
# Rules with too many errors to fix right now (40+ each)
no-matching-overload = "ignore" # 126 errors  
unknown-argument = "ignore"     # 61 errors

# Rules with moderate errors that need more investigation
call-non-callable = "ignore" # 7 errors
